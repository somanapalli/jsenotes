
  java-july 18th,2022
  
  
  java 
  
     -> we have two types of applications
	 
	 
	   .standalone applications/desktop apps
	   
	   .distributed applications
	   
	   
when java got released into the industry, jamesgosling released into 
three editions.

  .jse->java standard edition -> desktop applications
  .jee-> java enterprise edition -> network applications
  .jme->java micro/mobile edition -> micro related / mobile applications
  
  
 
jse:
````
 
  standalone application:
  ``````````````````````
   ->these applications which we are able to access from one machine only 
     in which machine you have installed
	 
   ->restults are not sharable across the globe.
   
   
 ex: acrobatic reader,antivirus,calculator,

 
jee:
````
  distributed applications
  
  
   ->these applicaions results are sharable across the globe.
   
   ex: 
    facebook,gmail,google..
	
	
 jee got implemented ontop of jse
why java is popular from those many years?

  java characterstics
  
  
->platform independent
->simple
->an
->portable
->dynamic
->interpreted
->secured
->robust
->distributed
-> 
  
  
jdk vs jre vs jvm:
 
  jdk stands for java development which provides following two environments
  
    1.development environment
	2.runtime environment
	

jre:
  jre stands for java runtime environment

   1.jre provides runtime environment
   

jvm:
  java virtual machine
using this -> we are able to execute the java program  
  
  
  
note:
````
every java program should starts with by defining class.

class:
`````
collection of methods + variables


variable:
``````````
 ->note: increases readability 
 
name given to memory location 

 purpose: 
  
  to store the value.
  
  
    a=100;


 <datatypename> <variablename> = <value>;
 
 int a = 100;
 byte b = 100;
 short s = 100;
 long l = 100;
 
  
  in java, we have 4 datatypes categories
  
   1.integer
     -byte(8bits)
	 -short(16bits)
	 -int
	 -long
	 
	 
   2.float
   
     -float
	 -double
	 
	 
   3.character
   
     -char
	 
   4.boolean 
     -boolean
   
   
  
  
 to calculate the formula

  -2^n-1 to (2^n-1) - 1
  
  where n -> no.of bits 
  
  

-2^7 to 2^7 -1

-128 to 127->range of byte datatype

 byte b = 127;//1 byte
 short b = 120;//2 bytes
 int b = 120;//4bytes
 
note:

by default float type data is double type 
 
float f = 23.4f;(precision -> upto 7 digits)-4 bytes
double d = 67.8; (precision -> upto 16 digits)-8 bytes

character :

 to store single character information
 
 2 bytes
 
 char c = 'r';
 
 java is following unicode character system
 
 
  ->18 international languages
  
  
boolean:
`````````
to store logical values
  true /false
  
  
  boolean b = false;
  
  true/false:
  
   because of these are the java reserved keywords
   
   java is case sensitive.
   
   note: 
   all java reserved keywords must be in lower case letters
   
   
 undefined

 

primitive datatypes:

String var = "ramakrishna";

    -variable name should always starts with character 
	-special characters are not allowed except _ and $(dollar)
	-we can't use variables names as any java reserved keywords
	-should not start with any numeric 
	-
	
java internally follows hungarian notation

  for class/interface 
  
     class TestInfo
	 {
	 }
  for variables
  
     first word first letter must be small and rest of the words first letters
	 must be in upper case.
	 
  
     String empName = "rama";
	 
	 
  for constants
  
     double PI = 3.14;
	 
  
  for methods
   
     firstword first letter must be in lower case 
	 and rest of the words first letters must be in upper case
	 ex: getStudentInfo(), getEmpSalary()....
	 
	 
  
  
 int a;
 sop(a);//0

every datatype has maintaining their own default values 
thse default values are initialized by system defined default constructor 
which will be generated by java compiler. 


note:
`````
every java program execution starts from main() 

who will call this main()?
 jvm 
 
example:
`````````

public class Test1 {
	static byte b;
	static float f;
	static char c;
	static boolean bool;

	public static void main(String[] args) {
		
		//static area	
		System.out.println(b);
		System.out.println(f);
		System.out.println(c);
		System.out.println(bool);
	}
}


note:
`````
can we overload the main()

yes;

exmaple:
`````````

public class Test1 {
	static byte b;
	static float f;
	static char c;
	static boolean bool;

	public static void main(String[] args) {
		
		//static area	
		System.out.println(b);
		System.out.println(f);
		System.out.println(c);
		System.out.println(bool);
		main();
	}
	
	public static void main()
	{
		System.out.println("iam form main");
	}
}


class

 -variables
 -methods

method:
````````
 method is the place where we are writing the logic which is used to 
 perform some operation based on the requirement.
 
 
 syntax:
   
     [accessmodifier] <returntype> <methodname>([parameters if any]) [exceptions]
	 {
	   //logic
	   
	 }
	 
	 void m1()
	 {
	 }
	 
 void is returntype it means it is not returning any value.
 
      int getAge()
	  {
	  return 55;
	  }
	  
 note:
 return type and return value must be compatible with each other 
 otherwise we will get compile time error 
 
 
 
      String getFullName(String fname,String lname)
	  {
	    return fname+lname;
	  }

note:
anything + string is always string only

example:
String toString()
{
 return empno + " " + empname + " " + empsalary;
}
	  
	  
	  
 example:
 ````````
 
   public  void  getName()
   {
     System.out.println("welcome to java sessions");
   }
   
   static int a;
   
   
   
   
 
instace vs static:
```````````````````
in java we have two areas are there

 -instance or non-static area
 
   the area which belongs to non-static method or instance method
   is known as instance area 
   
   
 -static area
 
    the area which belongs to static method is known as
	static area
	
	
 
 static properties:
 ````````````````````
 from instance area or static area we are able to access 
 static properties in following three ways.
 
         1.using classname
		 
		 2.using objectname(not recommended)
		 
		 3.direct
		 
		 
note:

for static properties memory gets created only one time.
memory gets allocated at the time of loading the class.


   String sname;
   float marks
   int id;
   static String collegeName;
   
for non staic properties memory gets created multiple times
as and when you create the object.


to whom we create the object?
 
 to class

how many we objects we can create?

 as many as you want based on the requirement.

 
example:
````````

public class Test1 {
	static byte b;
	static float f;
	static char c;
	static boolean bool;

	public static void main(String[] args) {
		
		//static area	
		System.out.println(b);//recommended way
		System.out.println(Test1.f);
		System.out.println(new Test1().bool);//not recommended
		
	}
	
	
}


instance properties:
`````````````````````
from instance area we are able to acess instance properties
directly

from static area we are able to access instance properties
using object name.


example:
````````

public class Test1 {
	 byte b;
	 float f;
     char c;
	 boolean bool;

	 
	 //instance method
	 
	 public void m1()
	 {
		 //instance area
		 
		 System.out.println(b);
		 System.out.println(bool);
		 System.out.println(f);
		 
	 }
	public static void main(String[] args) {
		//static area
		Test1 obj = new Test1();
		System.out.println(obj.b);
		System.out.println(obj.f);
		System.out.println(obj.bool);
		System.out.println("====================");
		//call m1()
		obj.m1();
	
	}
	
	
}


object:
``````
 ->instance of a class.
 
 instance is allocating sufficient amount of memory space for
 non static properties.
 
 
 
  ->new keyword(dynamic memory allocation operator)
  
 syntax:
 
   <classname> <objectname> = new <classname>();
   
 note:
for a single class, we can create as many as we want 

 note:
 object name is always unique.
 you can't define more than one object with same name.
 
 can we define one method inside another method?
  no
   
  
 can we call one method from another method?
  yes
 
 note:
 inner method definition is not possible where as
 inner method invocation is possible.
 
 
 example:


object initialization = object declaration + object referencing

  //object declaration
  Test obj;
  //object referencing
  obj=new Test();

variable initialization
 int x;
 x =20;
 
  Test -> class name  us user defined
  obj -> object name is user defined 
  =   -> assignment operator
  new -> dynamic memory allocation operator
  Test() -> constructor is also user defined depends on class name
  
  note: constructor name must be similar to class name.
  
  class &
  object
  
  
  java is object oriented programming language
  
     if and only if it follows oops principles
	 
	 oops principles -> are given by omg(object maangement group)
	  -candian organization
	  
	  -inheritance
	  -polymorphism
	  -encapsulation
	  -abstraction
	  
	  
conditional statements:
````````````````````````
Conditional statements define conditions that are true or false and then execute based on whether or not the condition is true

java if statement is used to test the condition 
it checks boolean condition true or false.


  -if statement
  -if else statement
  -if else if ladder
  -nested if statement


syntax

if(condition)
{
 //code to be executed
}

syntax:

 if(condition)
 {
   //code to be executed
  }
  else
  {
  //code to be executed
  }
  
 

example:
`````````

public class Test1 {
	 
	public static void main(String[] args) {
		int number=17;
		//check if the number is divisible by 2 or not
		
		if(number%2==0) {
			System.out.println("even number");
			
		}
		else
		{
			System.out.println("odd number");
		}
		
		
	
		
		
	}
	
	
}


assigment:
`````````
check if the given year is leap year or not using 
if else?


  
 ternary operator:
 `````````````````
 we can also use ternary operator(?:) to perform the task of if..else statement.
 
 it is a shorthand way to check the condition.
 
 
 if the condition is true the result of ? will be retunred
 if the condition is false the result of : will be returned.
 
 
example:
````````

public class Test1 {
	 
	public static void main(String[] args) {
		int number=18;
		//check if the number is divisible by 2 or not
		
		String result =(number%2==0)?"even number":"odd number";
		
	  System.out.println(result);
		
		
	}

}

if-else-if ladder statement:
`````````````````````````````
it executes one condition from multiple statements.

syntax:
 if(condition1)
 {
   //code to be executed
 }
 else if(condition2)
 {
   //code to be executed if condition2 is true
 }
 else if(condition3)
 {
   //code to be executed if condition3 is true
 }
 ..
 else
 {
   //code to be executed if all conditions are false.
 }
 
assignment:
````````````
write a program of grading system based on student marks
using if-else-if ladder statement.


assignment:
write a program to check positive,negative or zero?


nested if statement:
`````````````````````
if{

  if{
  }
 }
 
example:
`````````

public class Test1 {
	 
	public static void main(String[] args) {
		int age=15;
		int weight=48;
		//applying condition
		if(age>=18)
		{
			if(weight>50)
			{
				System.out.println("you are eligible to donate blood");
			}
			else
			{
				System.out.println("you are not eligible to donate blood");
			}
		}
		
		else
		{
			System.out.println("age must be greater than 18");
		}
		
	}
	
	
}

switch statement:
``````````````````
switch statement executes one statement from multiple conditions.

switch statement works with byte,short,int ,long,String,enum and some 
wrapper types.

syntax:

 switch(expression)
 {
 
 case value1:
 //code to be executed;
 break;//optional
 case value2:
 //code to be executed;
 break;
 ...
 
 ...
 default:
 //code to be executed if all cases not matched
 
 }
  


assignment
````````````
finding month name for the given number?

example:
````````

public class Test1 {
	 
	public static void main(String[] args) {
		
		int number=17;
		String month="";
		//switch statement
		switch(number) {
		
		//case statements with in the switch blokc
		
		case 1: month="january";
		break;
		case 2: month="February";
		break;
		case 3: month="March";
		break;
		case 4: month="April";
		break;
		case 5: month="May";
		break;
		case 6: month="June";
		break;
		case 7: month="July";
		break;
		case 8: month="August";
		break;
		case 9: month="September";
		break;
		case 10: month="October";
		break;
		case 11: month="November";
		break;
		case 12: month="December";
		break;
		
		default: System.out.println("invalid month");
		
		
		
		}
		
		System.out.println(month);
	}
	
}

assignment:
````````````
program to check vowel or consonant?


switch case with enum type:
```````````````````````````

public class Test1 {
	
	public enum Day{Sun,Mon,Tue,Wed,Thu,Fri,Sat};
	 
	public static void main(String[] args) {
		
		Day[] DayNow = Day.values();
		
		for(Day Now: DayNow)
		{
			switch(Now)
			{
			case Sun:
				System.out.println("sunday");
				break;
			case Mon:
				System.out.println("monday");
				break;	
			}
		}
		
		
	}
}













  
  
  
  
  
  
  
  
  
  
  
  
  