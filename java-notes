                                 
                                    
day-1

								  what is java?
								  
								   java is object oriented programming language
								   
								   
	
  what is the goal of programming language?

   
            to develop the software/application 

 			
	we do have two types of applications 
	
	 1.desktop application 
	 
	   desktop applications results are not sharable across the globe.
	   
	   
	   calculator
	   acroabtic reader
	   antivirus.
	   ....
	   
	   
	 2.distributed application
	 
	   results are sharable across the globe make sure you have proper internet connection.
	   
	   
	   facebook
	   gmail
	   flipkart
	   amazon...
	   
	
java got released in which year:
  1995
who is author?
  james gosling 
he released this software from which organization?

 sunmicrosystem





 he releaesd this software into threee editions
 
 
  1.jse
  
     ->desktop applications
	 
  2.jee
  
      ->desktop applications + distrubuted applications
	  
	  
  3.jme
  
     ->java micro/mobile edition 
	 
	 android 
  
significance of learning core java/jse:

->to implement desktop applications/standalone applications

->to learn jee

->to learn popular tools mulesoft,salesforce,tableu,hadoop...



1995
27 years back 

  because of it's java unique features.
  
  -13 features
  
  -simple
  -pi
  -an
  -dynamic
  -interpreted
  -multithreaded
  -secured
  -portable
  -object oriented 
  
  ....
  

platform independent:
`````````````````````

 c is platform dependent
 
 
 <filename>.c -> compile -> .exe ->windows os
 
 unix operating system 
 
   can't 
   
 
  compiled 
  executed
  
  
platform independent:
 
  .java ->.class file ->windows os
  
  yes
  
  java slogan -> wora -> write once run anywhere
  
  
  java software 
  
   
  
why java is object oriented?

 since this pl follows oops principles ->omg(object management group)-candian organization 
 
 
 
 inheritance
 polymorphism
 abstraction 
 encapsulation 
 
 .net,pyhton,php,cpp...
 
 


java is open source

java is case sensitive programming language


java -> sunmicrosystem

in recent years copy rights of sunmicrosystem reserved by oracle corporation 

 
  scjp
  
  ocjp
  
  
  url: www.oracle.com (signup) 
  
   
   
  
prerequistites to write the java program:
`````````````````````````````````````````
1.download the java software(jdk) and then install
2.select the editor (notepad,some ide's)eclipse,netbeans,myeclipse, 
2.write the java program 
4.save this java progra (<filename>.java)
5.compile the java program (.class)->java compiler
6.execute the java program ->output ->java interpretor (jvm)


jdk,jre,jvm:
```````````

jdk 
  java development kit
  https://www.oracle.com/in/java/technologies/downloads/
  
  
i wanted to cross check whether it gets installed or not?

open comand prompt and pass below command

  
    cmd:/> java -version 
	

with this jdk?
 am i able to write the java program 
 yes
 am i able to execute the java program 
 yes
 
 it provides 2 environments
 
  1.development environments
  2.runtime environments
  
  
 jre: java runtime environment 
 
 using this jre, 
 are we able to develop the java programs?
 no
 are we able to execute the java applications
 yes
 
 
 jvm: 
  java virtual machine
  
   using this we are able to execute the java program 
   
   

jdk = developement environment + jre

day-2
``````

structure of the java program:

 
  every java program should start with by defining a class.
  
  class <classname>
  {
   
  }
  
  
q) why should we compile the java program?

  compilation done by java compiler.
  
  java compiler : it is system defined program.
  
  
 how can we compile the java program?

 we do have one command is there 

  open the command prompt
  cmd:/> javac <filename>.java
  cmd:/> javac Welcome.java

  
NOTE:
when you compile the java program , if it compiles successfully 
.class file gets generated with class name


 Welcome
 HelloWorld.class
 
 
 .java file contains source code. 
 
 .class file contains bytecode.
 
 bytecode will be generated by compiler and this is not human readable
 code.
 
 
 
   -platform independent.
   
   
 
 
 
 jvm
 
we have to execute this file.


to execute this we have to give this .class file as an input to jvm 

  jvm will convert this bytecode to binary code.
  
  
what is the commadn to execute this java program?

  open the command prompt
  
   cmd:/> java HelloWorld


How to compile:
 
  javac <filename>.java
  
How to execute : 
   java <classname>
   
   
 note:
 
  every java program execution starts from main method.
  
  jvm internally invokes this main method.
  
  
java is object oriented programming language?

  because it follows oops principles.
  
  to achieve these oops principles in java we are using two concepts
  
   1.class
   2.object
   
   
class:
`````

class is the collection of variables and methods into a single unit.
this single unit is known as class.



variable:
 it is the name which we are giving to the memory location .
 
 
    100->memory area->system will generate one name 
	 
	 PQR444234234KLADJF
	 
	 stid=100;
	
	
while we are storing the data, we have to specify the type of the data. 
then only syntacticlly it is correct.
	
	numeric 
	character 
	string 
	float 
	...
	
	
for each and every type of data java provides some predefined data types
those are known as primitive data types.

note:
in java, datatypes can be categorized into 4 types

integer

  -byte
  -short
  -int
  -long

character

  -char

float

  -float
  -double

boolean 

  -boolean 
  
  
every datatype is having their own memory size and as well as 
range.

formula to calculate the range of any datatype:

 byte -> 1 byte -> 8 bits
 
 
  -2^n-1 to (2^n-1) - 1
  
  -2^7 to 2^7 -1
  
  -128 to 127
  
  byte b =100;
  short s = 100;
     int i = 100;
  long l =100;
  
  
 to store single character we have to use this char dataype
 
 character data always must be enclosed with in the single quotes.
 
   char c = 'a';
   
   float f = 123.45f;
   
   
note:
by default float data is of double type.

so that is why to store any float type after value must we have to 
add one character i.e f.

boolean :

  to store logical values whether it is true of false.
  
   boolean b = true;
   boolean b1 = false;
   
  note: 
  true and false are not normal words, these are java reserved keywords
  undefined 

  

variable syntax:
 
   variable initialization .
   
   
   
 <dataypename> <variablename> = <value>;
 
 int x;//variable declaration 
 x=100;//assignining the value
 int x = 100;//varaible initialization
 
 
method:
```````
method is the place where we are writing the logic to perform some operations based on requirement.


syntax:

   [accessmodifier] <returntype> <methodname>([if any parameters])
   {
      //logic
   }

example:

    void display()
	{
	  System.out.println("welcome to methods");
	}
	
    int getSalary()
	{
	  return 1000;
	}
	
	int sum(int a, int b)
	{
	   return a+b;
	}
	
	
	 sum(100,200);
	
	
 
 note: return type and return value must be compatible otherwise 
 it gives you compile time error.
 
while we are defining the methods we should follow some naming convention.

  GETAGE()

  getAge()
  getStudentInfo()
  
  
  
class is a collection of variables and methods into a single unit. 
that single unit is known as class.

 ex:
    
  class Student
  {
    //variables
    int stid=100;
    Strig stname="rama";
	
	//method name
	public void display()
	{
	 System.out.println(stid);
	 System.out.println(stname);
	}
 }
 
day-3:
```````
class is a collection 
 -variables
 -&methods 
 
 class <classname>
 {
 
   //varaibles
   
   //methods
 
 }
  
  
 object:
 ```````
 object is an instance of a class.
 
 instance:
 
  allocating sufficient amount of memory space for the non static properties 
  which we are defining inside the class. 
  
  
  note:
  for a single class, how many object(s) we can create?
  
   answer: as many as we want based on the requirement.
   
   
  
 1000 students.

 1000 student object.

 
  syntax to create the object:
  
   <classname> <objectname> = new <classname>();
   
   Student obj = new Student();
   
   Student obj1 = new Student();
   
   
   Student -> name of the class
   
   obj -> name of the object
   
   =  -> assignment operator
   
   
   new -> dynamic memory allocation operator
   
   Student() -> constructor
   
   
 // -> single line comment

/*

 */ -> multiline comment.

 
   
 example:
``````````
class Student
{
 int stid=100;
 String stname="Rama";
 
 public void display()
 {
   System.out.println("student id is : " + stid);
   System.out.println("student name is : " + stname);
 }
 
 
 public static void main(String[] args)
 {
    
	Student obj = new Student();
	
     System.out.println("student id is: " + obj.stid);
	 System.out.println("student name is : " + obj.stname);
	 System.out.println("===================");
	 //call the display() method
	 
	 obj.display();
	 
	 
 }
 
 }
 
 
instance vs static:
````````````````````
inside the class we can define instance properties and as well 
as static properties based on the requirement.

int stid;
static int stid;

void display()
{
}

static void display()
{
}

note:
to make any property as static property we have to use one java 
reserved keyword i.e static.


  
  
  college
   
     1000 students
	 
	   stid
	   stname
	   mobile
	   collegename
	   
	   
if a property is common for all the object(s) we can define that proeprty 
as static.

for static properties memory will be created at the time of class loading.
which is done by classloader subsystem it is the part of jvm.


	   
 static proeprties we can access using in these three possible ways.

  1.using classname(if property in one class, calling from another class)
  2.direct access (if property and calling is done in the same class)
  3.using object (not recommended)
  
  
  not static properties always we can acess using object name.
  
  
 instance(nonstatic) vs static area:


   
 the area which belongs to instance method or non static method is known 
 as instance area.
 
 
    //instance method
    public void display()
	{//instance area
	
	}
	
	public  static void  display()
	{
	//static area
	}
  
  
    java execution starts from main()
	
	public static void main(String[] args)
	{
	  //static area
	
	}
  


note:
````
from static area, to access the non-static properties using object name
it is possible.

from instance area, to access the instance properties direct access is 
possible.


from any area either instance / static area to access static properties
we do have following 3 possible ways.

   1.direct access
   2.using classname
   3.using object name(it is not at all recommended)
   
   
Student.java:
``````````````
class Student
{
	//non static properties
 int stid=100;
 String stname="Rama";
 
 
 //static property
 static String collegeName ="CBIT";
 
 
 public void display()
 {
	 //non-static or instance area
   System.out.println("student id is : " + stid);
   System.out.println("student name is : " + stname);
     System.out.println("student collegename is : " + collegeName);
	 System.out.println("student collegename is : " + this.collegeName);
	 System.out.println("student collegeName is: " + Student.collegeName);
 }
 
 
 public static void main(String[] args)
 {
    //static area
	Student obj = new Student();
	
     System.out.println("student id is: " + obj.stid);
	 System.out.println("student name is : " + obj.stname);
	 
	 System.out.println("student collegename is : " + collegeName);
	 System.out.println("student collegename is : " + obj.collegeName);
	 System.out.println("student collegeName is: " + Student.collegeName);
	 
	 System.out.println("===================");
	 //call the display() method
	 
	 obj.display();
	 
	 
 }
 
 }
 
 
Demo.java:
```````````
class Demo
{
	
	 public static void sum(int x, int y)
	 {
		 System.out.println("sum is: " + (x+y));
	 }
	 
	 public void add(int x, int y)
	 {
		   System.out.println("addition is: " +(x+y));
	 }
	 
 public static void main(String[] args)
 {
      //static area
	  sum(10,20);
	  
	  //call the add() which is instance method
	  
	 Demo obj = new Demo();
	  obj.add(20,30);
	  
	  
 }
 
}


command line arguments:
```````````````````````
whatever the input which we are passing while we are executing the program 
from the command prompt those areguments are known as
command line arguments.


  javac Demo.java
  
  java Demo 100 200
  
  
java.lang package

wrapper class:

The wrapper class in Java provides the mechanism to convert primitive into object and object into primitive


short -> Short -> short parseShort(String)
byte -> Byte -> byte parseByte(String)
int ->Integer -> int parseInt(String)

8 datatypes 

  -> 


why main() is taking String  as an arugment?

  to deal with command line arguments.
  
  
Demo.java:
``````````
class Demo
{
	 
 public static void main(String[] args)
 {
      
	String s1=args[0];
	String s2 = args[1];
	
	//convert first string value into integer value
	
	int fno = Integer.parseInt(s1);
	int sno = Integer.parseInt(s2);
	
	int result = fno+sno;
	
	System.out.println("sum is: " + result);
	
	 
	 
	 
 }
 
}


Demo.java:
```````````
class Demo
{
	 
 public static void main(String[] args)
 {
 
	System.out.println("sum is: " + (Integer.parseInt(args[0])+Integer.parseInt(args[1])));
 
 }
 
}




day-4:
```````

byte     Byte
short    Short
int      Integer
long     Long
float    Float
doube    Double
char     Character
boolean  Boolean


  to convert primitive type to object type and viceversa.
  
  autoboxing: converting primitive type to object type.
  autounboxing: converting object type to primitive type.
  
ide -> eclipse 

 ide ->integrated development environment

autointelligence
note: the code which we are writing inside ide is autocompiled.

 
eclipse is open source 
 -apache software foundation 
 url: https://www.eclipse.org/downloads/packages/release/helios/sr1/eclipse-ide-java-developers
 
 
 
  



example:
````````

public class Test {
	
	
	public static void main(String[] args) {
		//primitive type
		int x = 100;

		//auto boxing - primitive type to object type
        Integer y = Integer.valueOf(x);
        
        //auto unboxing - objet type to primitive type
        int z = y.intValue();
        
        System.out.println(z);
       
		
	}

}




autoboxing and unboxing:
`````````````````````````
Autoboxing is the automatic conversion that the Java compiler makes between the primitive types and their corresponding object wrapper classes. For example, converting an int to an Integer, a double to a Double, and so on. If the conversion goes the other way, this is called unboxing.


from jdk 1.5 version onwards these conversions are happening automatically 
by the java compiler.




String to Object and Object to String Conversion:

example:
`````````

public class Test {
	
	
	public static void main(String[] args) {
		//primitive type
		int x = 100;

		//auto boxing - primitive type to object type
        Integer y = Integer.valueOf(x);
        
        String z = y.toString();
        
        //int number = Integer.parseInt(z);
        Integer p = Integer.valueOf(z);
        
        System.out.println(z);
       
		
	}

}


type casting:
`````````````
we can perform this type casting at two levels.

 1. at primitive level 
 2. at referecne/object level 


type casting: 
conversion of one type data into another type data.

1. implicit type casting/widening type casting

       converting lower type to higher type 
	   
	   
	   it takes place 
	   both data types must be compatile with each other 
	   
	   the target type must be larger than the source type.
	   
	   
	   byte->short->char->int->long->float->double 
	   

example:
`````````

public class Test {
	
	
	public static void main(String[] args) {
		char c = 'a';
		int x =c;
		long y = x;
		float z = y;
		
		System.out.println("before conversion, char value: " + c);
		System.out.println("after conversion , int value: " + x);
		System.out.println("after conversion , long value: " + y);
		System.out.println("after conversion , float value: " + z);
		
	}

}


	    
2. explicit type casting/narrowing type casting

       converting higher type data to lower type data
	   
	   double -> flaot -> long -> int ->char ->short -> byte
	   
	   
example:
`````````

public class Test {
	
	
	public static void main(String[] args) {
		double d = 456.666;
		
		//converting double data type into long data type
		
		long l = (long)d;
		
		//converting long data type into int dataype
		
		int i =(int)l;
		
		System.out.println("Before conversion: " + d);
		System.out.println("After conversion into long type: " + l);
		System.out.println("After conversion into int type: " + i);
		
	}

}


	   


operator:

 operator in java is a symbol that is used to perform operations.
 
   unary operator
   Arithmetic Operator
   shift operator
   relational operator
   bitwise operator
   logical operator
   ternary operator
   assignment operator
   
   
unary operators require only one operand.

   -incrementing/decrementing a value by one
  
   pre increment post increment 
   
   ++a   a++
   
   --a   a--
   

example:
`````````

public class Test {
	
	
	public static void main(String[] args) {
		int a=10;
		System.out.println(a++);//10
		System.out.println(++a);//12
		System.out.println(a--);//12
		System.out.println(--a);//10
	
	}

}


example:
````````

public class Test {
	
	
	public static void main(String[] args) {
		int a=10;
		int b = 10;
		System.out.println(a++ + ++a);//10+12->22
		
		System.out.println(b++ + b++);//10+11->21
	
	}

}

day-5:
``````` 
relational operators
arithmetic operators(+,-,*,%,/)- to peroform arithmetic operators 
bitwise operators
shortcircuit operators
ternary operator
assignment operator




example:
`````````
public class Test {
public static void main(String[] args) {
	
		System.out.println(10+20);//30
		System.out.println(10*20);//200
		System.out.println(20-10);//10
		System.out.println(20/10);//2
		System.out.println(20%10);//0
	
		
		
	}

}


relational operators:
``````````````````````

to compare the values whether it is big or small 
 
 <
 <=
 >
 >=
 !=
 
example:
`````````
public class Test {
public static void main(String[] args) {
	
		System.out.println(10>20);//false
		System.out.println(10<20);//true
		System.out.println(20!=10);//true
		System.out.println(10==10);//true
		
		System.out.println((int)'a');
		System.out.println('a'>10);//true
	
	
		
		
	}

}



bitwise operators:
``````````````````

&-bitwise and

  T T -T
  T F -F
  F T -F
  F F -F
  
  
|-bitwise or
~-bitwise compliement
^-bitwise xor
 in case of bitwise xor 
 
  if both arguments are true -> false
  if both arguments are false -> false
  if any one argument is true -> true
  
example:
````````
public class Test {
public static void main(String[] args) {
	
		System.out.println(true&true);
		System.out.println(true&false);//false
		System.out.println(false&false);
		System.out.println(false&true);
	
		System.out.println(Integer.toBinaryString(4));
		System.out.println(Integer.toBinaryString(5));
	    System.out.println(4&5);//4
	    
	    System.out.println(false|false);
	    System.out.println(4|5);//5
	    
	    System.out.println(false^true);
		
	    System.out.println(4^5);
	    
	    System.out.println(~4);
	    
	    System.out.println(Integer.toBinaryString(-5));
	
	   
	    
	}

}

 



&&
||

in case of shortcirucit operators it won't check second argument if first argument is okay accordingly we will get the output. 

because of this performance and time of execution gets improved.

ternary operator:
`````````````````
String result = 10<20?"10 is lessthan 20":"10 is greater than 20"


example:
`````````
public class Test {
public static void main(String[] args) {
	
		int num1=20;
		int num2=10;
		
		int result;
		
		result = (num1>num2)?(num1+num2):(num1-num2);
		System.out.println(result);
	}

}


note: we are using very frequently for an alternative of if-else blocks.



control statements in java:
```````````````````````````
selection statements
  if else
  switch case
  
loop statements
  for 
  while
  do while
  for each 
  
transfer statements

  break
  continue
  assert
  
  
example:
````````
public class Test {
public static void main(String[] args) {
	
		int num1=10;
		int num2=10;
		
	    if(num1>num2)
	    {
	    	System.out.println(num1+num2);
	    }
	    else if(num1<num2)
	    {
	    	System.out.println(num1-num2);
	    }
	    else
	    {
	    	System.out.println("both the numbers are equal");
	    }
	}

}


switch case:
`````````````
switch(value or expression)
{


    case casevalue:
	   body
	   break;
	   
	case casevalue:
	   body
	   break;
	   
	default :
	body;

} 


example:
`````````
public class Test {
public static void main(String[] args) {
	
	
	
	int number=20;
	//switch expression 
	switch(number) {
	
	//case statements
	
	case 10: System.out.println("10"); 
	
	case 20: System.out.println("20");
	
	case 30: System.out.println("30");
	
	//default case statement
	
	default: System.out.println("not in 10, 20 or 30");
	
	}
}//closing main()



}//closing class


looping statements:
````````````````````
while loop

example:
```````
public class Test {
	public static void main(String[] args) {
	    int i=10;
		
		while(i<=1)
		{
			System.out.println(i);
			i--;
		}
		
		System.out.println("nothig is executed");
	
	}// closing main()

}// closing class

note:

in case of while loop, when condition is true then only inside the while 
loop statements will execute otherwise it will not execute.

when should we go for while loop?

when we are not aware about how many no.of time we would like to iterate
then we will go for while loop.


do while loop:
`````````````
in case of do while loop irresepective of condition is true or false
atlease one time the loop statement will be executed.

example:

public class Test {
	public static void main(String[] args) {
	    int i=11;
		do {
			System.out.println(i);
			i++;
		}
	    
	    while (i<=10);
		
	}// closing main()

}// closing class


for loop:
```````````

 for(initialization;conditionchecking;increment/decrement)
 {  
   //body
 }
 
example:
````````
public class Test {
	public static void main(String[] args) {
	  
		
		for(int i=1;i<=10;i++)
		{
			System.out.println(i);
		}
		System.out.println("nothing is executed");
	}// closing main()

}// closing class

example:
``````````
public class Test {
	public static void main(String[] args) {
	  
		
		for(int i=1;i<=10;i++)
		{
			
			if(i%2==0)
			{
				System.out.println(i);
			}
			
		}
		//System.out.println("nothing is executed");
	}// closing main()

}// closing class




continue:
`````````
public class Test {
	public static void main(String[] args) {
	  
		
		for(int i=1;i<=10;i++)
		{
			
			if(i%2==0)
			{
				continue;
			}
			System.out.println(i);
		}
		//System.out.println("nothing is executed");
	}// closing main()

}// closing class



   





 
  
  